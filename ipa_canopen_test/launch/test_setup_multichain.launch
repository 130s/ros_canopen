<?xml version="1.0"?>
<launch>
    <arg name="chain1" />
    <arg name="chain2" />
    <arg name="name" />
    <arg name="sim" default="false"/>
    <arg name="paused" default="false"/>

    <!-- start gazebo with empty world -->
    <include if="$(arg sim)" file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="paused" value="false" />
    </include>

    <!-- send urdf to param server -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find ipa_canopen_test)/urdf/$(arg name).urdf.xacro'" />
    
    <!-- push robot_description to factory and spawn robot in gazebo -->
    <node if="$(arg sim)" name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg name) -z 0.01 " respawn="false" output="screen" />

    <!-- robot state publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="50.0" />
        <param name="tf_prefix" type="string" value="" />
    </node>

    <!-- drivers -->
    <include unless="$(arg sim)" file="$(find ipa_canopen_test)/launch/controller_manager.launch">
        <arg name="config" value="$(find ipa_canopen_test)/config/canopen_$(arg chain2).yaml"/>
    </include>
    <include unless="$(arg sim)" file="$(find ipa_canopen_test)/launch/controller_manager.launch">
        <arg name="config" value="$(find ipa_canopen_test)/config/canopen_$(arg chain1).yaml"/>
    </include>

    <!-- controllers -->
    <rosparam if="$(arg sim)"                                   command="load" file="$(find ipa_canopen_test)/config/$(arg chain1)_controller.yaml" />
    <rosparam unless="$(arg sim)" ns="$(arg chain1)_controller" command="load" file="$(find ipa_canopen_test)/config/$(arg chain1)_controller.yaml" />
    <rosparam if="$(arg sim)"                                   command="load" file="$(find ipa_canopen_test)/config/$(arg chain2)_controller.yaml" />
    <rosparam unless="$(arg sim)" ns="$(arg chain2)_controller" command="load" file="$(find ipa_canopen_test)/config/$(arg chain2)_controller.yaml" />

    <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner" args="joint_state_controller" />
    <!--node name="$(arg chain1)_joint_position_controller_spawner" pkg="controller_manager" type="spawner" args="$(arg chain1)_joint_position_controller" /-->
    <!--node name="$(arg chain2)_joint_position_controller_spawner" pkg="controller_manager" type="spawner" args="$(arg chain2)_joint_position_controller" /-->
    <node name="$(arg chain1)_controller_spawner" pkg="controller_manager" type="spawner" args="$(arg chain1)_controller" />
    <node name="$(arg chain2)_controller_spawner" pkg="controller_manager" type="spawner" args="$(arg chain2)_controller" />

    <!-- upload script server parameters -->
    <rosparam command="load" ns="/script_server/$(arg chain1)" file="$(find ipa_canopen_test)/config/$(arg chain1)_joint_configurations.yaml"/>
    <rosparam command="load" ns="/script_server/$(arg chain2)" file="$(find ipa_canopen_test)/config/$(arg chain2)_joint_configurations.yaml"/>

</launch>
