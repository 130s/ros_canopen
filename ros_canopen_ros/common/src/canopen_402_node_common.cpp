// ROS message includes
#include "ros/ros.h"
#include <sensor_msgs/JointState.h>
#include <control_msgs/JointTrajectoryControllerState.h>
#include <diagnostic_msgs/DiagnosticArray.h>
#include <industrial_msgs/RobotStatus.h>
#include <control_msgs/FollowJointTrajectoryFeedback.h>
#include <brics_actuator/JointVelocities.h>
#include <brics_actuator/JointPositions.h>
#include <trajectory_msgs/JointTrajectory.h>
#include <trajectory_msgs/JointTrajectoryPoint.h>
#include <cob_srvs/Trigger.h>
#include <cob_srvs/Trigger.h>
#include <cob_srvs/Trigger.h>
#include <cob_srvs/Trigger.h>
#include <industrial_msgs/StopMotion.h>

/* protected region user include files on begin */
/* protected region user include files end */

class canopen_402_node_config
{
public:
    double diagnostics_frequency;
    std::string chain_name;
    double timeout;
    XmlRpc::XmlRpcValue bus;
    XmlRpc::XmlRpcValue modules;
    XmlRpc::XmlRpcValue robot_description;
};

class canopen_402_node_data
{
// autogenerated: don't touch this class
public:
    //input data
    brics_actuator::JointVelocities in_command_vel;
    brics_actuator::JointPositions in_command_pos;
    trajectory_msgs::JointTrajectory in_joint_path_command;
    trajectory_msgs::JointTrajectoryPoint in_joint_command;
    //output data
    sensor_msgs::JointState out_joint_states;
    bool out_joint_states_active;
    control_msgs::JointTrajectoryControllerState out_state;
    bool out_state_active;
    diagnostic_msgs::DiagnosticArray out_diagnostics;
    bool out_diagnostics_active;
    industrial_msgs::RobotStatus out_robot_status;
    bool out_robot_status_active;
    control_msgs::FollowJointTrajectoryFeedback out_feedback_states;
    bool out_feedback_states_active;
};

class canopen_402_node_impl
{
    /* protected region user member variables on begin */
    /* protected region user member variables end */

public:
    canopen_402_node_impl() 
    {
        /* protected region user constructor on begin */
        /* protected region user constructor end */
    }

    void configure(canopen_402_node_config config) 
    {
        /* protected region user configure on begin */
        /* protected region user configure end */
    }

    void update(canopen_402_node_data &data, canopen_402_node_config config)
    {
        /* protected region user update on begin */
        /* protected region user update end */
    }

    bool callback_init(cob_srvs::Trigger::Request  &req, cob_srvs::Trigger::Response &res , canopen_402_node_config config)
    {
        /* protected region user implementation of service callback for init on begin */
        /* protected region user implementation of service callback for init end */
        return true;
    }
    bool callback_recover(cob_srvs::Trigger::Request  &req, cob_srvs::Trigger::Response &res , canopen_402_node_config config)
    {
        /* protected region user implementation of service callback for recover on begin */
        /* protected region user implementation of service callback for recover end */
        return true;
    }
    bool callback_shutdown(cob_srvs::Trigger::Request  &req, cob_srvs::Trigger::Response &res , canopen_402_node_config config)
    {
        /* protected region user implementation of service callback for shutdown on begin */
        /* protected region user implementation of service callback for shutdown end */
        return true;
    }
    bool callback_halt(cob_srvs::Trigger::Request  &req, cob_srvs::Trigger::Response &res , canopen_402_node_config config)
    {
        /* protected region user implementation of service callback for halt on begin */
        /* protected region user implementation of service callback for halt end */
        return true;
    }
    bool callback_stop_motion(industrial_msgs::StopMotion::Request  &req, industrial_msgs::StopMotion::Response &res , canopen_402_node_config config)
    {
        /* protected region user implementation of service callback for stop_motion on begin */
        /* protected region user implementation of service callback for stop_motion end */
        return true;
    }

    /* protected region user additional functions on begin */
    /* protected region user additional functions end */
};
